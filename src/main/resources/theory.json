{
  "practice": [
    {
      "target": "Изучение базовых принципов ООП в языке Java.",
      "theory": "В Java, класс является определением объектов одного и того же вида.\nДругими словами, класс — это тип данных, создаваемый программистом для\nрешения задач. Он представляет из себя шаблон, или прототип, который\nопределяет и описывает статические свойства и динамическое поведение, общие\nдля всех объектов одного и того же вида.\nЭкземпляр класса - реализация конкретного объекта типа класс. Другими\nсловами, экземпляр экземпляра класса. Все экземпляры класса имеют аналогичные свойства, как задано в определении класса. Например, вы можете\nопределить класс с именем \"Студент \" и создать три экземпляра класса\n\"Студент\": \" Петр\", \" Павел\" и \" Полина \". Термин \"Объект \" обычно относится\nк экземпляру класса. Но он часто используется свободно, которые могут\nотноситься к классу или экземпляру.\nГрафически можно представить класс в виде UML1 диаграммы как\nпрямоугольник в виде как трех секций, в котором присутствует секция\nнаименования класса, секция инкапсуляции данных и методов (функций или\nопераций) класса. \n",
      "conclusion": "Было реализовано 3 класса (“Dog”, “Ball”, “Book”). Свойства и методы схожи с реальными объектами “Dog”, “Ball” и “Book”.",
      "literature": "1.\tКонспект лекций по дисциплине “Программирование на языке Java”, РТУ МИРЭА. Лектор – Зорина Н.В."
    },
    {
      "target": "Работа с UML-диаграммами классов",
      "theory": "Язык моделирования Unified Modeling Language (UML) является стандартом де-факто с 1998 года для проектирования и документирования объектно-ориентированных программ. Средствами UML в виде диаграмм можно графически изобразить класс и экземпляр класса.\nГрафически представляем класс в виде прямоугольника, разделенного на три области – область именования класса, область инкапсуляции данных и область операций (методы).\nИмя (или сущность) : определяет класс.\nПеременные (или атрибуты, состояние, поля данных класса): содержит статические атрибуты класса, или описывают свойства класса (сущности предметной области).",
      "conclusion": "Я научился строить и пользоваться UML диаграммами.",
      "literature": "1.\tКонспект лекций по дисциплине “Программирование на языке Java”, РТУ МИРЭА. Лектор – Зорина Н.В."
    },
    {
      "target": "Освоить на практике работу с абстрактными классами и наследованием на Java.",
      "theory": "\nabstract void yourMethod();\nКласс, содержащий абстрактные методы, называется абстрактным классом. Такие классы при определении помечаются ключевым словом abstract.\nАбстрактный метод внутри абстрактного класса не имеет тела, только прототип. Он состоит только из объявления и не имеет тела:\nПо сути, мы создаём шаблон метода. Например, можно создать абстрактный метод для вычисления площади фигуры в абстрактном классе Фигура. А все другие производные классы от главного класса могут уже реализовать свой код для готового метода. Ведь площадь у прямоугольника и треугольника вычисляется по разным алгоритмам и универсального метода не существует.\nЕсли вы объявляете класс, производный от абстрактного класса, но хотите иметь возможность создания объектов нового типа, вам придётся предоставить определения для всех абстрактных методов базового класса. Если этого не сделать, производный класс тоже останется абстрактным, и компилятор заставит пометить новый класс ключевым словом abstract.\nАбстрактный класс не может содержать какие-либо объекты, а также абстрактные конструкторы и абстрактные статические методы. Любой подкласс абстрактного класса должен либо реализовать все абстрактные методы суперкласса, либо сам быть объявлен абстрактным.",
      "conclusion": "Я научился работать с абстрактными классами. Появилось понимание наследования в Java.",
      "literature": "1.\tКонспект лекций по дисциплине “Программирование на языке Java”, РТУ МИРЭА. Лектор – Зорина Н.В."
    },
    {
      "target": "Введение в событийное программирование на языке Java.",
      "theory": "Text Fields - текстовое поле или поля для ввода текста (можно ввести только одну строку). Примерами текстовых полей являются поля для ввода логина и пароля, например, используемые, при входе в электронную почту.\nПример создания объекта класса JTextField:\nJTextField jta = new JTextField (10);\nВ параметрах конструктора задано число 10, это количество символов, которые могут быть видны в текстовом поле. Текст веденный в поле JText может быть возвращен с помощью метода getText(). Также в поле можно записать новое значение с помощью метода setText(String s).\nКак и у других компонентов, мы можем изменять цвет и шрифт текста в текстовом поле.\n",
      "conclusion": "Появилось понимание реализации парадигмы событийного программирования в Java.",
      "literature": "1.\tКонспект лекций по дисциплине “Программирование на языке Java”, РТУ МИРЭА. Лектор – Зорина Н.В."
    },
    {
      "target": "Разработка и программирование рекурсивных алгоритмов на языке Java.",
      "theory": "В контексте языка программирования рекурсия — это некий активный метод (или подпрограмма) вызываемый сам по себе непосредственно, или вызываемой другим методом (или подпрограммой) косвенно. В первую очередь надо понимать, что рекурсия — это своего рода перебор. Вообще говоря, всё то, что решается итеративно можно решить рекурсивно, то есть с использованием рекурсивной функции.\nТак же, как и у перебора (цикла) у рекурсии должно быть условие остановки — базовый случай (иначе также, как и цикл, рекурсия будет работать вечно — infinite). Это условие и является тем случаем, к которому рекурсия идет (шаг рекурсии). При каждом шаге вызывается рекурсивная функция до тех пор, пока при следующем вызове не сработает базовое условие и не произойдет остановка рекурсии (а точнее возврат к последнему вызову функции). Всё решение сводится к поиску решения для базового случая. В случае, когда рекурсивная функция вызывается для решения сложной задачи (не базового случая) выполняется некоторое количество рекурсивных вызовов или шагов, с целью сведения задачи к более простой. И так до тех пор, пока не получим базовое решение.",
      "conclusion": "Я научился работать с рекурсивными алгоритмами в языке Java.",
      "literature": "1.\tКонспект лекций по дисциплине “Программирование на языке Java”, РТУ МИРЭА. Лектор – Зорина Н.В."
    }
  ]
}